---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-custom-quay
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: cli
    tekton.dev/displayName: "Deploy Quay Ecosystem"
spec:
  description: >-
    This task creates creates the Quay Registry CRD to deploy the Quay Ecosystem.
    It uses the pre-built custom-quay-config-bundle secret we created in a previous task.
  params:
  - name: CONFIG_BUNDLE
    description: Quay Config Bundle Secret
    type: string
    default: "custom-quay-config-bundle"
  - name: CLAIR
    description: Enable/Disable Clair Deployment
    type: string
    default: "true"
  - name: REDIS
    description: Enable/Disable Redis Deployment
    type: string
    default: "true"
  - name: POSTGRES
    description: Enable/Disable Postgres Deployment
    type: string
    default: "true"
  - name: ROUTE
    description: Enable/Disable Route Management
    type: string
    default: "true"
  - name: MIRROR
    description: Enable/Disable Mirror Deployment
    type: string
    default: "false"
  - name: OBJECT_STORAGE
    description: Enable/Disable Object Storage Deployment
    type: string
    default: "false"
  - name: HORIZONTAL_POD
    description: Enable/Disable Horizontal Pod Scaler Deployment
    type: string
    default: "false"
  - name: VERSION
    description: The OpenShift Version to use
    type: string
    default: '4.6'
  steps:
    - name: create-keycloak-client
      env:
        - name: secretNAMESPACE
          valueFrom:
            secretKeyRef:
              key: namespace
              name: admin-creds
      image: quay.io/openshift/origin-cli:$(params.VERSION)
      script: |
        oc project $secretNAMESPACE
        oc delete limitrange --all
        oc apply -f - << EOF
        apiVersion: quay.redhat.com/v1
        kind: QuayRegistry
        metadata:
          name: quay-ecosystem
        spec:
          components:
            - kind: clair
              managed: $(params.CLAIR)
            - kind: postgres
              managed: $(params.POSTGRES)
            - kind: redis
              managed: $(params.REDIS)
            - kind: route
              managed: $(params.ROUTE)
            - kind: mirror
              managed: $(params.MIRROR)
            - kind: objectstorage
              managed: $(params.OBJECT_STORAGE)
            - kind: horizontalpodautoscaler
              managed: $(params.HORIZONTAL_POD)
          configBundleSecret: $(params.CONFIG_BUNDLE)
        EOF
        
